package com.macrokeysserver.logging;

import java.util.Date;
import java.util.EventListener;
import java.util.Objects;

import javax.swing.event.EventListenerList;

import org.eclipse.jdt.annotation.NonNull;

import com.macrokeys.MacroKey;
import com.macrokeys.MacroSetup;
import com.macrokeys.comunication.MacroServer;
import com.macrokeys.netcode.MacroNetServer;
import com.macrokeysserver.MacroServerManager;
import com.macrokeysserver.MacroServerManager.ServerManagerListener;
import com.macrokeysserver.ServiceType;
import com.macrokeysserver.bluetooth.MacroBluetoothServer;

/**
 * Handles the server log events.
 * <p>
 * In practice converts the events generated by {@link MacroServerManager} and
 * {@link MacroServer} in a format more cohirent for a logging system.
 * </p>
 */
public class MacroServerLogManager {

	private final EventListenerList listeners = new EventListenerList();
	
	
	public MacroServerLogManager(@NonNull MacroServerManager serverManager) {
		serverManager.addListener(new ServerManagerListener() {
			
			@Override
			public void onSuspendChanged(MacroServer server, boolean newState) {
				String message = newState ? "Server disabled" : "Server enabled";
				fireLogEvent(LogEventType.ServerSuspedStateChange,
						server,
						null,
						message);
			}
			
			@Override
			public void onMacroSetupChanged(MacroServer server,
					MacroSetup actual) {
				String message = "Macro setup updated";
				fireLogEvent(LogEventType.ServerMacroSetupChange,
						server,
						null,
						message);
			}
			
			@Override
			public void onKeyReceved(MacroServer server, String sender,
					MacroKey mk, boolean action) {
				String keys = mk.getKeySeq() + " (" + mk.getType() + ")";
				String message = (action ? "Pressure" : "Release") + " of " + keys;
				LogEventType t = action ? LogEventType.ClientKeyPress :
					LogEventType.ClientKeyRelease;
				fireLogEvent(t,
						server,
						sender,
						message);
			}
			
			@Override
			public void onDisconnectListener(MacroServer server, String sender) {
				String message = "Client disconnected";
				fireLogEvent(LogEventType.ClientDisconnected,
						server,
						sender,
						message);
			}
			
			@Override
			public void onConnectListener(MacroServer server, String sender) {
				String message = "Client connected";
				fireLogEvent(LogEventType.ClientConnected,
						server,
						sender,
						message);
			}
			
			@Override
			public void onClose(MacroServer server) {
				String message = serverType(server) + " server closed";
				fireLogEvent(LogEventType.ServerClosed,
						server,
						null,
						message);
			}
			
			@Override
			public void onStart(MacroServer server) {
				String message = serverType(server) + " server created";
				fireLogEvent(LogEventType.ServerCreated,
						server,
						null,
						message);
			}
		});
	}
	
	
	/**
	 * Add a log listener
	 * @param l Listener to add
	 */
	public void addLogEventListener(@NonNull LogEventListener l) {
		Objects.requireNonNull(l);
		
		listeners.add(LogEventListener.class, l);
	}
	
	
	/**
	 * Remove the instance of a log listener
	 * @param l Event to remove
	 */
	public void removeLogEventListener(@NonNull LogEventListener l) {
		Objects.requireNonNull(l);
		
		listeners.remove(LogEventListener.class, l);
	}
	
	
	/**
	 * Generate a log event
	 * @param type Event type
	 * @param server Server subject to the event
	 * @param client Client id that generated the event; null if none
	 * @param message Log message
	 */
	private void fireLogEvent(@NonNull LogEventType type, @NonNull MacroServer server,
			String client, @NonNull String message) {
		assert type != null && server != null && message != null;
		
		Date time = new Date();
		String serverType = serverType(server);
		for(LogEventListener l :
			listeners.getListeners(LogEventListener.class)) {
			l.log(time, type, serverType, client, message);
		}
	}
	
	
	/**
	 * Obtains the string that identifies a server
	 * @param s Server to define its type
	 * @return Server type
	 */
	private static String serverType(@NonNull MacroServer s) {
		assert s != null;
		
		ServiceType type = MacroServerManager.serverService(s);
		switch(type) {
		case TCP_IP: return "Net";
		case Bluetooth: return "Bluetooth";
		default: assert false; return null;
		
		}
	}
	
	
	/**
	 * Listener for a log event
	 */
	public interface LogEventListener extends EventListener {
		
		/**
		 * Logged event
		 * @param time Timestap of the event
		 * @param type Event type
		 * @param serverType String to identify the server type (eg. TCP/IP, Bluetooth, ...)
		 * @param client Id of the client; null if the client does not matter with this log
		 * @param message Log message
		 */
		void log(Date time, LogEventType type, String serverType, String client,
				String message);
	}
}
